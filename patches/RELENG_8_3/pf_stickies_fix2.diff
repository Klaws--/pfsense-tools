diff --git a/sys/contrib/pf/net/pf.c b/sys/contrib/pf/net/pf.c
index f46a854..e00826a 100644
--- a/sys/contrib/pf/net/pf.c
+++ b/sys/contrib/pf/net/pf.c
@@ -555,10 +555,12 @@ pf_src_compare(struct pf_src_node *a, struct pf_src_node *b)
 {
 	int	diff;
 
+#if 0
 	if (a->rule.ptr > b->rule.ptr)
 		return (1);
 	if (a->rule.ptr < b->rule.ptr)
 		return (-1);
+#endif
 	if ((diff = a->af - b->af) != 0)
 		return (diff);
 	switch (a->af) {
@@ -1006,10 +1008,12 @@ pf_insert_src_node(struct pf_src_node **sn, struct pf_rule *rule,
 	if (*sn == NULL) {
 		k.af = af;
 		PF_ACPY(&k.addr, src, af);
+#if 0
 		if (rule->rule_flag & PFRULE_RULESRCTRACK ||
 		    rule->rpool.opts & PF_POOL_STICKYADDR)
 			k.rule.ptr = rule;
 		else
+#endif
 			k.rule.ptr = NULL;
 		pf_status.scounters[SCNT_SRC_NODE_SEARCH]++;
 		*sn = RB_FIND(pf_src_tree, &tree_src_tracking, &k);
@@ -1029,10 +1033,12 @@ pf_insert_src_node(struct pf_src_node **sn, struct pf_rule *rule,
 		    rule->max_src_conn_rate.seconds);
 
 		(*sn)->af = af;
+#if 0
 		if (rule->rule_flag & PFRULE_RULESRCTRACK ||
 		    rule->rpool.opts & PF_POOL_STICKYADDR)
 			(*sn)->rule.ptr = rule;
 		else
+#endif
 			(*sn)->rule.ptr = NULL;
 		PF_ACPY(&(*sn)->addr, src, af);
 		if (RB_INSERT(pf_src_tree,
@@ -3410,6 +3416,7 @@ void
 pf_set_rt_ifp(struct pf_state *s, struct pf_addr *saddr)
 {
 	struct pf_rule *r = s->rule.ptr;
+	struct pf_src_node *sn = NULL;
 
 	s->rt_kif = NULL;
 	if (!r->rt || r->rt == PF_FASTROUTE)
@@ -3418,18 +3425,20 @@ pf_set_rt_ifp(struct pf_state *s, struct pf_addr *saddr)
 #ifdef INET
 	case AF_INET:
 		pf_map_addr(AF_INET, r, saddr, &s->rt_addr, NULL,
-		    &s->nat_src_node);
-		s->rt_kif = r->rpool.cur->kif;
+		    &sn);
 		break;
 #endif /* INET */
 #ifdef INET6
 	case AF_INET6:
 		pf_map_addr(AF_INET6, r, saddr, &s->rt_addr, NULL,
-		    &s->nat_src_node);
-		s->rt_kif = r->rpool.cur->kif;
+		    &sn);
 		break;
 #endif /* INET6 */
 	}
+	if (sn != NULL && sn->kif != NULL)
+		s->rt_kif = sn->kif;
+	else
+		s->rt_kif = r->rpool.cur->kif;
 }
 
 void
