diff --git a/contrib/pf/pfctl/parse.y b/contrib/pf/pfctl/parse.y
index 4e47b1e..957d70c 100644
--- a/contrib/pf/pfctl/parse.y
+++ b/contrib/pf/pfctl/parse.y
@@ -423,7 +423,7 @@ typedef struct {
 
 %}
 
-%token	PASS BLOCK SCRUB RETURN IN OS OUT LOG QUICK ON FROM TO FLAGS
+%token	PASS BLOCK MATCH SCRUB RETURN IN OS OUT LOG QUICK ON FROM TO FLAGS
 %token	RETURNRST RETURNICMP RETURNICMP6 PROTO INET INET6 ALL ANY ICMPTYPE
 %token	ICMP6TYPE CODE KEEP MODULATE STATE PORT RDR NAT BINAT ARROW NODF
 %token	MINTTL ERROR ALLOWOPTS FASTROUTE FILENAME ROUTETO DUPTO REPLYTO NO LABEL SCHEDULE
@@ -2328,6 +2328,7 @@ filter_opt	: USER uids {
 		;
 
 action		: PASS			{ $$.b1 = PF_PASS; $$.b2 = $$.w = 0; }
+		| MATCH			{ $$.b1 = PF_MATCH; $$.b2 = $$.w = 0; }
 		| BLOCK blockspec	{ $$ = $2; $$.b1 = PF_DROP; }
 		;
 
@@ -5201,6 +5202,7 @@ lookup(char *s)
 		{ "load",		LOAD},
 		{ "log",		LOG},
 		{ "loginterface",	LOGINTERFACE},
+		{ "match",		MATCH},
 		{ "max",		MAXIMUM},
 		{ "max-mss",		MAXMSS},
 		{ "max-packets",	MAXPCKT},
diff --git a/contrib/pf/pfctl/pf_print_state.c b/contrib/pf/pfctl/pf_print_state.c
index 87a7c29..c3c34ef 100644
--- a/contrib/pf/pfctl/pf_print_state.c
+++ b/contrib/pf/pfctl/pf_print_state.c
@@ -294,6 +294,10 @@ print_state(struct pf_state *s, int opts)
 			printf(", anchor %u", s->anchor.nr);
 		if (s->rule.nr != -1)
 			printf(", rule %u", s->rule.nr);
+		if (s->pdnpipe)
+			printf(", pdnpipe %u", s->pdnpipe);
+		if (s->dnpipe)
+			printf(", dnpipe %u", s->dnpipe);
 		if (s->state_flags & PFSTATE_SLOPPY)
 			printf(", sloppy");
 		if (s->src_node != NULL)
diff --git a/contrib/pf/pfctl/pfctl_parser.c b/contrib/pf/pfctl/pfctl_parser.c
index 204cbc7..19eea73 100644
--- a/contrib/pf/pfctl/pfctl_parser.c
+++ b/contrib/pf/pfctl/pfctl_parser.c
@@ -689,7 +689,9 @@ print_rule(struct pf_rule *r, const char *anchor_call, int verbose, int numeric)
 
 	if (verbose)
 		printf("@%d ", r->nr);
-	if (r->action > PF_NORDR)
+	if (r->action == PF_MATCH)
+		printf("match");
+	else if (r->action > PF_NORDR)
 		printf("action(%d)", r->action);
 	else if (anchor_call[0]) {
 		if (anchor_call[0] == '_') {
diff --git a/sys/contrib/pf/net/pf.c b/sys/contrib/pf/net/pf.c
index 16b84a7..f46a854 100644
--- a/sys/contrib/pf/net/pf.c
+++ b/sys/contrib/pf/net/pf.c
@@ -232,6 +232,8 @@ struct pf_rule		*pf_get_translation(struct pf_pdesc *, struct mbuf *,
 			    struct pf_addr *, u_int16_t,
 			    struct pf_addr *, u_int16_t,
 			    struct pf_addr *, u_int16_t *);
+void			 pf_rule_to_actions(struct pf_rule *,
+			    struct pf_rule_actions *);
 int			 pf_test_tcp(struct pf_rule **, struct pf_state **,
 			    int, struct pfi_kif *, struct mbuf *, int,
 			    void *, struct pf_pdesc *, struct pf_rule **,
@@ -3430,6 +3432,21 @@ pf_set_rt_ifp(struct pf_state *s, struct pf_addr *saddr)
 	}
 }
 
+void
+pf_rule_to_actions(struct pf_rule *r, struct pf_rule_actions *a)
+{
+	if (r->qid)
+		a->qid = r->qid;
+	if (r->pqid)
+		a->pqid = r->pqid;
+	if (r->pdnpipe)
+		a->pdnpipe = r->pdnpipe;
+	if (r->dnpipe)
+		a->dnpipe = r->dnpipe;
+	if (r->free_flags & PFRULE_DN_IS_PIPE)
+		a->flags |= PFRULE_DN_IS_PIPE;
+}
+
 int
 pf_test_tcp(struct pf_rule **rm, struct pf_state **sm, int direction,
     struct pfi_kif *kif, struct mbuf *m, int off, void *h,
@@ -3448,6 +3465,7 @@ pf_test_tcp(struct pf_rule **rm, struct pf_state **sm, int direction,
 	sa_family_t		 af = pd->af;
 	struct pf_rule		*r, *a = NULL;
 	struct pf_ruleset	*ruleset = NULL;
+	struct pf_rule_actions	 act = { 0 };
 	struct pf_src_node	*nsn = NULL;
 	u_short			 reason;
 	int			 rewrite = 0;
@@ -3566,10 +3584,20 @@ pf_test_tcp(struct pf_rule **rm, struct pf_state **sm, int direction,
 			if (r->rtableid >= 0)
 				rtableid = r->rtableid;
 			if (r->anchor == NULL) {
-				match = 1;
-				*rm = r;
-				*am = a;
-				*rsm = ruleset;
+				if (r->action == PF_MATCH) {
+					r->packets[direction == PF_OUT]++;
+					r->bytes[direction == PF_OUT] += pd->tot_len;
+					pf_rule_to_actions(r, &act);
+					if (r->log)
+						PFLOG_PACKET(kif, h, m, af,
+						    direction, PFRES_MATCH, r,
+						    a, ruleset, pd);
+				} else {
+					match = 1;
+					*rm = r;
+					*am = a;
+					*rsm = ruleset;
+				}
 				if ((*rm)->quick)
 					break;
 				r = TAILQ_NEXT(r, entries);
@@ -3585,6 +3613,9 @@ pf_test_tcp(struct pf_rule **rm, struct pf_state **sm, int direction,
 	a = *am;
 	ruleset = *rsm;
 
+	/* apply actions for last matching pass/block rule */
+	pf_rule_to_actions(r, &act);
+
 	REASON_SET(&reason, PFRES_MATCH);
 
 	if (r->log || (nr != NULL && nr->natpass && nr->log)) {
@@ -3709,6 +3740,11 @@ cleanup:
 		if (nr != NULL)
 			s->log |= nr->log & PF_LOG_ALL;
 		s->proto = IPPROTO_TCP;
+		s->qid = act.qid;
+		s->pqid = act.pqid;
+		s->pdnpipe = act.pdnpipe;
+		s->dnpipe = act.dnpipe;
+		s->state_flags |= act.flags;
 		s->direction = direction;
 		s->af = af;
 		if (direction == PF_OUT) {
@@ -3877,6 +3913,7 @@ pf_test_udp(struct pf_rule **rm, struct pf_state **sm, int direction,
 	sa_family_t		 af = pd->af;
 	struct pf_rule		*r, *a = NULL;
 	struct pf_ruleset	*ruleset = NULL;
+	struct pf_rule_actions   act = { 0 };
 	struct pf_src_node	*nsn = NULL;
 	u_short			 reason;
 	int			 rewrite = 0;
@@ -3991,10 +4028,20 @@ pf_test_udp(struct pf_rule **rm, struct pf_state **sm, int direction,
 			if (r->rtableid >= 0)
 				rtableid = r->rtableid;
 			if (r->anchor == NULL) {
-				match = 1;
-				*rm = r;
-				*am = a;
-				*rsm = ruleset;
+				if (r->action == PF_MATCH) {
+                                        r->packets[direction == PF_OUT]++;
+                                        r->bytes[direction == PF_OUT] += pd->tot_len;
+                                        pf_rule_to_actions(r, &act);
+                                        if (r->log)
+                                                PFLOG_PACKET(kif, h, m, af,
+                                                    direction, PFRES_MATCH, r,
+                                                    a, ruleset, pd);
+                                } else {
+					match = 1;
+					*rm = r;
+					*am = a;
+					*rsm = ruleset;
+				}
 				if ((*rm)->quick)
 					break;
 				r = TAILQ_NEXT(r, entries);
@@ -4010,6 +4057,9 @@ pf_test_udp(struct pf_rule **rm, struct pf_state **sm, int direction,
 	a = *am;
 	ruleset = *rsm;
 
+	/* apply actions for last matching pass/block rule */
+        pf_rule_to_actions(r, &act);
+
 	REASON_SET(&reason, PFRES_MATCH);
 
 	if (r->log || (nr != NULL && nr->natpass && nr->log)) {
@@ -4112,6 +4162,11 @@ cleanup:
 		if (nr != NULL)
 			s->log |= nr->log & PF_LOG_ALL;
 		s->proto = IPPROTO_UDP;
+		s->qid = act.qid;
+                s->pqid = act.pqid;
+		s->pdnpipe = act.pdnpipe;
+		s->dnpipe = act.dnpipe;
+		s->state_flags |= act.flags;
 		s->direction = direction;
 		s->af = af;
 		if (direction == PF_OUT) {
@@ -4185,6 +4240,7 @@ pf_test_icmp(struct pf_rule **rm, struct pf_state **sm, int direction,
 	struct pf_addr		*saddr = pd->src, *daddr = pd->dst;
 	struct pf_rule		*r, *a = NULL;
 	struct pf_ruleset	*ruleset = NULL;
+	struct pf_rule_actions   act = { 0 };
 	struct pf_src_node	*nsn = NULL;
 	u_short			 reason;
 	u_int16_t		 icmpid = 0, bport, nport = 0;
@@ -4334,10 +4390,20 @@ pf_test_icmp(struct pf_rule **rm, struct pf_state **sm, int direction,
 			if (r->rtableid >= 0)
 				rtableid = r->rtableid;
 			if (r->anchor == NULL) {
-				match = 1;
-				*rm = r;
-				*am = a;
-				*rsm = ruleset;
+				if (r->action == PF_MATCH) {
+                                        r->packets[direction == PF_OUT]++;
+                                        r->bytes[direction == PF_OUT] += pd->tot_len;
+                                        pf_rule_to_actions(r, &act);
+                                        if (r->log)
+                                                PFLOG_PACKET(kif, h, m, af,
+                                                    direction, PFRES_MATCH, r,
+                                                    a, ruleset, pd);
+                                } else {
+					match = 1;
+					*rm = r;
+					*am = a;
+					*rsm = ruleset;
+				}
 				if ((*rm)->quick)
 					break;
 				r = TAILQ_NEXT(r, entries);
@@ -4353,6 +4419,9 @@ pf_test_icmp(struct pf_rule **rm, struct pf_state **sm, int direction,
 	a = *am;
 	ruleset = *rsm;
 
+	/* apply actions for last matching pass/block rule */
+        pf_rule_to_actions(r, &act);
+
 	REASON_SET(&reason, PFRES_MATCH);
 
 	if (r->log || (nr != NULL && nr->natpass && nr->log)) {
@@ -4431,6 +4500,11 @@ cleanup:
 		if (nr != NULL)
 			s->log |= nr->log & PF_LOG_ALL;
 		s->proto = pd->proto;
+		s->qid = act.qid;
+                s->pqid = act.pqid;
+		s->pdnpipe = act.pdnpipe;
+		s->dnpipe = act.dnpipe;
+		s->state_flags |= act.flags;
 		s->direction = direction;
 		s->af = af;
 		if (direction == PF_OUT) {
@@ -4503,6 +4577,7 @@ pf_test_other(struct pf_rule **rm, struct pf_state **sm, int direction,
 	struct pf_rule		*nr = NULL;
 	struct pf_rule		*r, *a = NULL;
 	struct pf_ruleset	*ruleset = NULL;
+	struct pf_rule_actions   act = { 0 };
 	struct pf_src_node	*nsn = NULL;
 	struct pf_addr		*saddr = pd->src, *daddr = pd->dst;
 	sa_family_t		 af = pd->af;
@@ -4599,10 +4674,20 @@ pf_test_other(struct pf_rule **rm, struct pf_state **sm, int direction,
 			if (r->rtableid >= 0)
 				rtableid = r->rtableid;
 			if (r->anchor == NULL) {
-				match = 1;
-				*rm = r;
-				*am = a;
-				*rsm = ruleset;
+				if (r->action == PF_MATCH) {
+                                        r->packets[direction == PF_OUT]++;
+                                        r->bytes[direction == PF_OUT] += pd->tot_len;
+                                        pf_rule_to_actions(r, &act);
+                                        if (r->log)
+                                                PFLOG_PACKET(kif, h, m, af,
+                                                    direction, PFRES_MATCH, r,
+                                                    a, ruleset, pd);
+                                } else {
+					match = 1;
+					*rm = r;
+					*am = a;
+					*rsm = ruleset;
+				}
 				if ((*rm)->quick)
 					break;
 				r = TAILQ_NEXT(r, entries);
@@ -4618,6 +4703,9 @@ pf_test_other(struct pf_rule **rm, struct pf_state **sm, int direction,
 	a = *am;
 	ruleset = *rsm;
 
+	/* apply actions for last matching pass/block rule */
+        pf_rule_to_actions(r, &act);
+
 	REASON_SET(&reason, PFRES_MATCH);
 
 	if (r->log || (nr != NULL && nr->natpass && nr->log))
@@ -4724,6 +4812,11 @@ cleanup:
 		if (nr != NULL)
 			s->log |= nr->log & PF_LOG_ALL;
 		s->proto = pd->proto;
+		s->qid = act.qid;
+                s->pqid = act.pqid;
+		s->pdnpipe = act.pdnpipe;
+		s->dnpipe = act.dnpipe;
+		s->state_flags |= act.flags;
 		s->direction = direction;
 		s->af = af;
 		if (direction == PF_OUT) {
@@ -4780,6 +4873,7 @@ pf_test_fragment(struct pf_rule **rm, int direction, struct pfi_kif *kif,
 {
 	struct pf_rule		*r, *a = NULL;
 	struct pf_ruleset	*ruleset = NULL;
+	struct pf_rule_actions   act = { 0 };
 	sa_family_t		 af = pd->af;
 	u_short			 reason;
 	int			 tag = -1;
@@ -4823,10 +4917,20 @@ pf_test_fragment(struct pf_rule **rm, int direction, struct pfi_kif *kif,
 			r = TAILQ_NEXT(r, entries);
 		else {
 			if (r->anchor == NULL) {
-				match = 1;
-				*rm = r;
-				*am = a;
-				*rsm = ruleset;
+				if (r->action == PF_MATCH) {
+                                        r->packets[direction == PF_OUT]++;
+                                        r->bytes[direction == PF_OUT] += pd->tot_len;
+                                        pf_rule_to_actions(r, &act);
+                                        if (r->log)
+                                                PFLOG_PACKET(kif, h, m, af,
+                                                    direction, PFRES_MATCH, r,
+                                                    a, ruleset, pd);
+                                } else {
+					match = 1;
+					*rm = r;
+					*am = a;
+					*rsm = ruleset;
+				}
 				if ((*rm)->quick)
 					break;
 				r = TAILQ_NEXT(r, entries);
@@ -4842,6 +4946,9 @@ pf_test_fragment(struct pf_rule **rm, int direction, struct pfi_kif *kif,
 	a = *am;
 	ruleset = *rsm;
 
+	/* apply actions for last matching pass/block rule */
+        pf_rule_to_actions(r, &act);
+
 	REASON_SET(&reason, PFRES_MATCH);
 
 	if (r->log)
@@ -7652,6 +7759,12 @@ done:
 		pd.pf_mtag->af = AF_INET;
 		pd.pf_mtag->hdr = h;
 	}
+	if (s) {
+		if ((pqid || (pd.tos & IPTOS_LOWDELAY)) && s->pqid)
+			pd.pf_mtag->qid = s->pqid;
+		else if (s->qid)
+			pd.pf_mtag->qid = s->qid;
+	}
 #endif /* ALTQ */
 
 #ifdef __FreeBSD__
@@ -7705,11 +7818,15 @@ done:
 				return (action);
 			}
 		}
-       	} else if ((r->dnpipe || (divflags & PFSTATE_DIVERT_DNCOOKIE)) &&
+       	} else if (((s && s->dnpipe) || r->dnpipe || (divflags & PFSTATE_DIVERT_DNCOOKIE)) &&
 	    ip_dn_io_ptr != NULL && loopedfrom != 1) {
 
 			if (divflags & PFSTATE_DIVERT_DNCOOKIE) {
 				dnflow.rule.info = divertcookie;
+                        } else if (dir != r->direction && s && s->pdnpipe) {
+                                dnflow.rule.info = s->pdnpipe;
+                        } else if (dir == r->direction && s && s->dnpipe) {
+                                dnflow.rule.info = s->dnpipe;
                         } else if (dir != r->direction && r->pdnpipe) {
                                 dnflow.rule.info = r->pdnpipe;
                         } else if (dir == r->direction) {
@@ -7719,6 +7836,8 @@ done:
 
 			if (r->free_flags & PFRULE_DN_IS_PIPE)
 				dnflow.rule.info |= IPFW_IS_PIPE;
+			if (s && s->state_flags & PFRULE_DN_IS_PIPE)
+				dnflow.rule.info |= IPFW_IS_PIPE;
                         dnflow.f_id.addr_type = 4; /* IPv4 type */
                         dnflow.f_id.proto = pd.proto;
 			if (dir == PF_OUT && s != NULL && s->nat_rule.ptr != NULL &&
diff --git a/sys/contrib/pf/net/pf_ruleset.c b/sys/contrib/pf/net/pf_ruleset.c
index b33396e..31c3e99 100644
--- a/sys/contrib/pf/net/pf_ruleset.c
+++ b/sys/contrib/pf/net/pf_ruleset.c
@@ -127,6 +127,7 @@ pf_get_ruleset_number(u_int8_t action)
 		return (PF_RULESET_SCRUB);
 		break;
 	case PF_PASS:
+	case PF_MATCH:
 	case PF_DROP:
 		return (PF_RULESET_FILTER);
 		break;
diff --git a/sys/contrib/pf/net/pfvar.h b/sys/contrib/pf/net/pfvar.h
index f80e967..83d5736 100644
--- a/sys/contrib/pf/net/pfvar.h
+++ b/sys/contrib/pf/net/pfvar.h
@@ -80,7 +80,8 @@ struct inpcb;
 enum	{ PF_INOUT, PF_IN, PF_OUT };
 enum	{ PF_LAN_EXT, PF_EXT_GWY, PF_ID };
 enum	{ PF_PASS, PF_DROP, PF_SCRUB, PF_NOSCRUB, PF_NAT, PF_NONAT,
-	  PF_BINAT, PF_NOBINAT, PF_RDR, PF_NORDR, PF_SYNPROXY_DROP };
+	  PF_BINAT, PF_NOBINAT, PF_RDR, PF_NORDR, PF_SYNPROXY_DROP, 
+	  PF_MATCH };
 enum	{ PF_RULESET_SCRUB, PF_RULESET_FILTER, PF_RULESET_NAT,
 	  PF_RULESET_BINAT, PF_RULESET_RDR, PF_RULESET_MAX };
 enum	{ PF_OP_NONE, PF_OP_IRG, PF_OP_EQ, PF_OP_NE, PF_OP_LT,
@@ -570,6 +571,13 @@ struct pf_osfp_ioctl {
 	int			fp_getnum;	/* DIOCOSFPGET number */
 };
 
+struct pf_rule_actions {
+	u_int16_t	qid;
+	u_int16_t	pqid;
+	u_int32_t	pdnpipe;
+	u_int32_t	dnpipe;
+	u_int8_t	flags;
+};
 
 union pf_rule_ptr {
 	struct pf_rule		*ptr;
@@ -630,8 +638,8 @@ struct pf_rule {
 		u_int32_t		limit;
 		u_int32_t		seconds;
 	}			 max_src_conn_rate;
-	u_int32_t		 qid;
-	u_int32_t		 pqid;
+	u_int16_t		 qid;
+	u_int16_t		 pqid;
 	u_int32_t                dnpipe;
         u_int32_t                pdnpipe;
 #define	PFRULE_DN_IS_PIPE	0x00000010
@@ -877,6 +885,10 @@ struct pf_state {
 	u_int32_t	 creation;
 	u_int32_t	 expire;
 	u_int32_t	 pfsync_time;
+	u_int16_t	 qid;
+	u_int16_t	 pqid;
+	u_int32_t        pdnpipe;
+	u_int32_t        dnpipe;
 	u_int16_t	 tag;
 	u_int16_t	 divert_cookie;
 };
