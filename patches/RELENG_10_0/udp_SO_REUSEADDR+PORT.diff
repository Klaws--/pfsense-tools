diff --git a/sys/netinet/udp_usrreq.c b/sys/netinet/udp_usrreq.c
index 0c6f98e..6c77e2d 100644
--- a/sys/netinet/udp_usrreq.c
+++ b/sys/netinet/udp_usrreq.c
@@ -610,6 +610,49 @@ udp_input(struct mbuf *m, int off)
 		return;
 	}
 
+	if (inp->inp_phd != NULL) {
+		struct inpcb *local_inp;
+		struct mbuf *n;
+
+		LIST_FOREACH(local_inp, &inp->inp_phd->phd_pcblist, inp_portlist) {
+			if (local_inp == inp)
+				continue;
+
+			if ((inp->inp_vflag & INP_IPV4) == 0)
+                                continue;
+			if (local_inp->inp_lport != uh->uh_dport)
+				continue;
+			if (local_inp->inp_laddr.s_addr != INADDR_ANY &&
+			    inp->inp_laddr.s_addr != ip->ip_dst.s_addr)
+				continue;
+
+			/*
+			 * Check the minimum TTL for socket.
+			 */
+			if (local_inp->inp_ip_minttl && local_inp->inp_ip_minttl > ip->ip_ttl)
+				continue;
+
+			if ((n = m_copy(m, 0, M_COPYALL)) == NULL)
+				continue; /* XXX: Log about this? */
+			INP_RLOCK(local_inp);
+			UDP_PROBE(receive, NULL, local_inp, ip, local_inp, uh);
+			udp_append(local_inp, ip, n, iphlen, &udp_in);
+			INP_RUNLOCK(local_inp);
+			/*
+			 * Don't look for additional matches if this one does
+			 * not have either the SO_REUSEPORT or SO_REUSEADDR
+			 * socket options set.  This heuristic avoids
+			 * searching through all pcbs in the common case of a
+			 * non-shared port.  It assumes that an application
+			 * will never clear these options after setting them.
+			 */
+			if ((local_inp->inp_socket->so_options &
+			    (SO_REUSEPORT|SO_REUSEADDR)) == 0)
+				break;
+		}
+
+	}
+
 	/*
 	 * Check the minimum TTL for socket.
 	 */
diff --git a/sys/netinet6/udp6_usrreq.c b/sys/netinet6/udp6_usrreq.c
index e4963e2..cd1c9c1 100644
--- a/sys/netinet6/udp6_usrreq.c
+++ b/sys/netinet6/udp6_usrreq.c
@@ -457,6 +457,52 @@ udp6_input(struct mbuf **mp, int *offp, int proto)
 		icmp6_error(m, ICMP6_DST_UNREACH, ICMP6_DST_UNREACH_NOPORT, 0);
 		return (IPPROTO_DONE);
 	}
+	if (inp->inp_phd != NULL) {
+		struct inpcb *local_inp;
+		struct mbuf *n;
+
+		LIST_FOREACH(local_inp, &inp->inp_phd->phd_pcblist, inp_portlist) {
+			if (local_inp == inp)
+				continue;
+
+			if ((inp->inp_vflag & INP_IPV6) == 0)
+				continue;
+			if (local_inp->inp_lport != uh->uh_dport)
+				continue;
+			if (!IN6_IS_ADDR_UNSPECIFIED(&local_inp->in6p_laddr)) {
+				if (!IN6_ARE_ADDR_EQUAL(&local_inp->in6p_laddr,
+							&ip6->ip6_dst))
+					continue;
+			}
+
+			if ((n = m_copy(m, 0, M_COPYALL)) == NULL)
+				continue; /* XXX: Log about this? */
+			INP_RLOCK(local_inp);
+			up = intoudpcb(local_inp);
+			UDP_PROBE(receive, NULL, local_inp, ip6, local_inp, uh);
+			if (up->u_tun_func == NULL) {
+				udp6_append(inp, n, off, &fromsa);
+			} else {
+				/*
+				 * Engage the tunneling protocol.
+				 */
+
+				(*up->u_tun_func)(n, off, local_inp);
+			}
+			INP_RUNLOCK(local_inp);
+			/*
+			 * Don't look for additional matches if this one does
+			 * not have either the SO_REUSEPORT or SO_REUSEADDR
+			 * socket options set.  This heuristic avoids
+			 * searching through all pcbs in the common case of a
+			 * non-shared port.  It assumes that an application
+			 * will never clear these options after setting them.
+			 */
+			if ((local_inp->inp_socket->so_options &
+			     (SO_REUSEPORT|SO_REUSEADDR)) == 0)
+				break;
+		}
+	}
 	INP_RLOCK_ASSERT(inp);
 	up = intoudpcb(inp);
 	UDP_PROBE(receive, NULL, inp, ip6, inp, uh);
