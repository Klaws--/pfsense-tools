diff --git a/sbin/pfctl/pfctl.c b/sbin/pfctl/pfctl.c
index b6b57b1..caf132c 100644
--- a/sbin/pfctl/pfctl.c
+++ b/sbin/pfctl/pfctl.c
@@ -2061,7 +2061,7 @@ main(int argc, char *argv[])
 		usage();
 
 	while ((ch = getopt(argc, argv,
-	    "a:AdD:eqf:F:gG:hi:k:K:mnNOo:Pp:rRs:t:T:vx:y:z")) != -1) {
+	    "a:AdD:eqf:F:gG:hi:k:K:mnNOo:Pp:rRs:t:T:vx:y:zZ")) != -1) {
 		switch (ch) {
 		case 'a':
 			anchoropt = optarg;
@@ -2203,6 +2203,10 @@ main(int argc, char *argv[])
 			opts |= PF_OPT_CLRRULECTRS;
 			mode = O_RDWR;
 			break;
+		case 'Z':
+			opts |= PFCTL_FLAG_OPTION_ONLY;
+			mode = O_RDWR;
+			break;
 		case 'h':
 			/* FALLTHROUGH */
 		default:
@@ -2427,6 +2431,14 @@ main(int argc, char *argv[])
 		if (pfctl_clear_interface_flags(dev, opts | PF_OPT_QUIET))
 			error = 1;
 
+	if ((rulesopt != NULL) && (loadopt & PFCTL_FLAG_OPTION_ONLY)) {
+		/* XXX: ugly but works */
+		loadopt |= PFCTL_FLAG_OPTION;
+		if (pfctl_load_options(&pf));
+			exit(1);
+		exit(0);
+	}
+
 	if (rulesopt != NULL && !(opts & (PF_OPT_MERGE|PF_OPT_NOACTION)) &&
 	    !anchorname[0] && (loadopt & PFCTL_FLAG_OPTION))
 		if (pfctl_file_fingerprints(dev, opts, PF_OSFP_FILE))
diff --git a/sbin/pfctl/pfctl_parser.h b/sbin/pfctl/pfctl_parser.h
index 9b2c5dd..74d0716 100644
--- a/sbin/pfctl/pfctl_parser.h
+++ b/sbin/pfctl/pfctl_parser.h
@@ -303,6 +303,7 @@ struct pf_timeout {
 #define PFCTL_FLAG_OPTION	0x08
 #define PFCTL_FLAG_ALTQ		0x10
 #define PFCTL_FLAG_TABLE	0x20
+#define PFCTL_FLAG_OPTION_ONLY	0x40
 
 extern const struct pf_timeout pf_timeouts[];
 
