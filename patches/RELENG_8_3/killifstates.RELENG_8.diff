diff --git a/contrib/pf/pfctl/pfctl.c b/contrib/pf/pfctl/pfctl.c
index a1d8d7a..4142755 100644
--- a/contrib/pf/pfctl/pfctl.c
+++ b/contrib/pf/pfctl/pfctl.c
@@ -119,6 +119,8 @@ int		 src_node_killers;
 char		*src_node_kill[2];
 int		 state_killers;
 char		*state_kill[2];
+int		 if_kill;
+char		*if_gw_kill;
 int		 loadopt;
 int		 altqsupport;
 
@@ -382,14 +384,51 @@ pfctl_clear_states(int dev, const char *iface, int opts)
 	struct pfioc_state_kill psk;
 
 	memset(&psk, 0, sizeof(psk));
+
 	if (iface != NULL && strlcpy(psk.psk_ifname, iface,
 	    sizeof(psk.psk_ifname)) >= sizeof(psk.psk_ifname))
 		errx(1, "invalid interface: %s", iface);
 
-	if (ioctl(dev, DIOCCLRSTATES, &psk))
-		err(1, "DIOCCLRSTATES");
-	if ((opts & PF_OPT_QUIET) == 0)
-		fprintf(stderr, "%d states cleared\n", psk.psk_af);
+	if (if_kill) {
+		struct addrinfo *res, *resp;
+		u_int killed;
+		int ret_ga;
+
+		if ((ret_ga = getaddrinfo(if_gw_kill, NULL, NULL, &res))) {
+			errx(1, "getaddrinfo: %s", gai_strerror(ret_ga));
+			/* NOTREACHED */
+		}
+		killed = 0;
+		for (resp = res; resp; resp = resp->ai_next) {
+			if (resp->ai_addr == NULL)
+				continue;
+
+			psk.psk_af = resp->ai_family;
+
+			if (psk.psk_af == AF_INET)
+				psk.psk_src.addr.v.a.addr.v4 =
+				    ((struct sockaddr_in *)resp->ai_addr)->sin_addr;
+			else if (psk.psk_af == AF_INET6)
+				psk.psk_src.addr.v.a.addr.v6 =
+				    ((struct sockaddr_in6 *)resp->ai_addr)->
+				    sin6_addr;
+			else
+				errx(1, "Unknown address family %d", psk.psk_af);
+
+			if (ioctl(dev, DIOCCLRSTATES, &psk))
+				err(1, "DIOCCLRSTATES");
+			if ((opts & PF_OPT_QUIET) == 0)
+				killed += psk.psk_af;
+		}
+		if ((opts & PF_OPT_QUIET) == 0)
+			fprintf(stderr, "%d states cleared\n", killed);
+	} else {
+		if (ioctl(dev, DIOCCLRSTATES, &psk))
+			err(1, "DIOCCLRSTATES");
+		if ((opts & PF_OPT_QUIET) == 0)
+			fprintf(stderr, "%d states cleared\n", psk.psk_af);
+	}
+
 	return (0);
 }
 
@@ -1980,7 +2019,7 @@ main(int argc, char *argv[])
 		usage();
 
 	while ((ch = getopt(argc, argv,
-	    "a:AdD:eqf:F:ghi:k:K:mnNOo::Pp:rRs:t:T:vx:z")) != -1) {
+	    "a:AdD:eqf:F:gG:hi:k:K:mnNOo::Pp:rRs:t:T:vx:z")) != -1) {
 		switch (ch) {
 		case 'a':
 			anchoropt = optarg;
@@ -2049,6 +2088,16 @@ main(int argc, char *argv[])
 		case 'g':
 			opts |= PF_OPT_DEBUG;
 			break;
+		case 'G':
+			if (if_kill) {
+				warnx("can only specify -b twice");
+				usage();
+				/* NOTREACHED */
+			}
+			if_gw_kill = optarg;
+			if_kill++;
+			mode = O_RDWR;
+			break;
 		case 'A':
 			loadopt |= PFCTL_FLAG_ALTQ;
 			break;
diff --git a/sys/contrib/pf/net/if_pfsync.c b/sys/contrib/pf/net/if_pfsync.c
index a729afd..dfdc532 100644
--- a/sys/contrib/pf/net/if_pfsync.c
+++ b/sys/contrib/pf/net/if_pfsync.c
@@ -602,9 +602,9 @@ pfsync_input(struct mbuf *m, ...)
 				return;
 			}
 			for (st = RB_MIN(pf_state_tree_lan_ext,
-			    &kif->pfik_lan_ext); st; st = nexts) {
+			    &pfi_all->pfik_lan_ext); st; st = nexts) {
 				nexts = RB_NEXT(pf_state_tree_lan_ext,
-				    &kif->pfik_lan_ext, st);
+				    &pfi_all->pfik_lan_ext, st);
 				if (st->creatorid == creatorid) {
 					st->sync_flags |= PFSTATE_FROMSYNC;
 					pf_unlink_state(st);
diff --git a/sys/contrib/pf/net/pf.c b/sys/contrib/pf/net/pf.c
index 7383677..38c7e6b 100644
--- a/sys/contrib/pf/net/pf.c
+++ b/sys/contrib/pf/net/pf.c
@@ -360,8 +360,8 @@ struct pf_pool_limit pf_pool_limits[PF_LIMIT_MAX] = {
 	(s)->lan.addr.addr32[3] != (s)->gwy.addr.addr32[3])) || \
 	(s)->lan.port != (s)->gwy.port
 
-#define BOUND_IFACE(r, k) \
-	((r)->rule_flag & PFRULE_IFBOUND) ? (k) : pfi_all
+#define BOUND_IFACE(r, k)	k
+	/* ((r)->rule_flag & PFRULE_IFBOUND) ? (k) : pfi_all */
 
 #define STATE_INC_COUNTERS(s)				\
 	do {						\
@@ -664,17 +664,21 @@ pf_find_state_recurse(struct pfi_kif *kif, struct pf_state_cmp *key, u_int8_t tr
 
 	switch (tree) {
 	case PF_LAN_EXT:
+#if 0
 		if ((s = RB_FIND(pf_state_tree_lan_ext, &kif->pfik_lan_ext,
 		    (struct pf_state *)key)) != NULL)
 			return (s);
+#endif
 		if ((s = RB_FIND(pf_state_tree_lan_ext, &pfi_all->pfik_lan_ext,
 		    (struct pf_state *)key)) != NULL)
 			return (s);
 		return (NULL);
 	case PF_EXT_GWY:
+#if 0
 		if ((s = RB_FIND(pf_state_tree_ext_gwy, &kif->pfik_ext_gwy,
 		    (struct pf_state *)key)) != NULL)
 			return (s);
+#endif
 		if ((s = RB_FIND(pf_state_tree_ext_gwy, &pfi_all->pfik_ext_gwy,
 		    (struct pf_state *)key)) != NULL)
 			return (s);
@@ -688,34 +692,34 @@ struct pf_state *
 pf_find_state_all(struct pf_state_cmp *key, u_int8_t tree, int *more)
 {
 	struct pf_state *s, *ss = NULL;
-	struct pfi_kif	*kif;
+	/* struct pfi_kif	*kif;*/
 
 	pf_status.fcounters[FCNT_STATE_SEARCH]++;
 
 	switch (tree) {
 	case PF_LAN_EXT:
-		TAILQ_FOREACH(kif, &pfi_statehead, pfik_w_states) {
+		/* TAILQ_FOREACH(kif, &pfi_statehead, pfik_w_states) { */
 			s = RB_FIND(pf_state_tree_lan_ext,
-			    &kif->pfik_lan_ext, (struct pf_state *)key);
+			    &pfi_all->pfik_lan_ext, (struct pf_state *)key);
 			if (s == NULL)
-				continue;
+				return NULL;
 			if (more == NULL)
 				return (s);
 			ss = s;
 			(*more)++;
-		}
+		/* } */
 		return (ss);
 	case PF_EXT_GWY:
-		TAILQ_FOREACH(kif, &pfi_statehead, pfik_w_states) {
+		/* TAILQ_FOREACH(kif, &pfi_statehead, pfik_w_states) { */
 			s = RB_FIND(pf_state_tree_ext_gwy,
-			    &kif->pfik_ext_gwy, (struct pf_state *)key);
+			    &pfi_all->pfik_ext_gwy, (struct pf_state *)key);
 			if (s == NULL)
-				continue;
+				return NULL;
 			if (more == NULL)
 				return (s);
 			ss = s;
 			(*more)++;
-		}
+		/* } */
 		return (ss);
 	default:
 		panic("pf_find_state_all");
@@ -917,7 +921,7 @@ pf_insert_state(struct pfi_kif *kif, struct pf_state *state)
 {
 	/* Thou MUST NOT insert multiple duplicate keys */
 	state->u.s.kif = kif;
-	if (RB_INSERT(pf_state_tree_lan_ext, &kif->pfik_lan_ext, state)) {
+	if (RB_INSERT(pf_state_tree_lan_ext, &pfi_all->pfik_lan_ext, state)) {
 		if (pf_status.debug >= PF_DEBUG_MISC) {
 			printf("pf: state insert failed: tree_lan_ext");
 			printf(" lan: ");
@@ -936,7 +940,7 @@ pf_insert_state(struct pfi_kif *kif, struct pf_state *state)
 		return (-1);
 	}
 
-	if (RB_INSERT(pf_state_tree_ext_gwy, &kif->pfik_ext_gwy, state)) {
+	if (RB_INSERT(pf_state_tree_ext_gwy, &pfi_all->pfik_ext_gwy, state)) {
 		if (pf_status.debug >= PF_DEBUG_MISC) {
 			printf("pf: state insert failed: tree_ext_gwy");
 			printf(" lan: ");
@@ -952,7 +956,7 @@ pf_insert_state(struct pfi_kif *kif, struct pf_state *state)
 				printf(" (from sync)");
 			printf("\n");
 		}
-		RB_REMOVE(pf_state_tree_lan_ext, &kif->pfik_lan_ext, state);
+		RB_REMOVE(pf_state_tree_lan_ext, &pfi_all->pfik_lan_ext, state);
 		return (-1);
 	}
 
@@ -976,8 +980,8 @@ pf_insert_state(struct pfi_kif *kif, struct pf_state *state)
 				printf(" (from sync)");
 			printf("\n");
 		}
-		RB_REMOVE(pf_state_tree_lan_ext, &kif->pfik_lan_ext, state);
-		RB_REMOVE(pf_state_tree_ext_gwy, &kif->pfik_ext_gwy, state);
+		RB_REMOVE(pf_state_tree_lan_ext, &pfi_all->pfik_lan_ext, state);
+		RB_REMOVE(pf_state_tree_ext_gwy, &pfi_all->pfik_ext_gwy, state);
 		return (-1);
 	}
 	TAILQ_INSERT_TAIL(&state_list, state, u.s.entry_list);
@@ -1213,9 +1217,9 @@ pf_unlink_state(struct pf_state *cur)
 		    TH_RST|TH_ACK, 0, 0, 0, 1, cur->tag, NULL, NULL);
 	}
 	RB_REMOVE(pf_state_tree_ext_gwy,
-	    &cur->u.s.kif->pfik_ext_gwy, cur);
+	    &pfi_all->pfik_ext_gwy, cur);
 	RB_REMOVE(pf_state_tree_lan_ext,
-	    &cur->u.s.kif->pfik_lan_ext, cur);
+	    &pfi_all->pfik_lan_ext, cur);
 	RB_REMOVE(pf_state_tree_id, &tree_id, cur);
 #if NPFSYNC
 	if (cur->creatorid == pf_status.hostid)
diff --git a/sys/contrib/pf/net/pf_ioctl.c b/sys/contrib/pf/net/pf_ioctl.c
index 979a14f..5f649f3 100644
--- a/sys/contrib/pf/net/pf_ioctl.c
+++ b/sys/contrib/pf/net/pf_ioctl.c
@@ -1957,6 +1957,16 @@ pfioctl(dev_t dev, u_long cmd, caddr_t addr, int flags, struct proc *p)
 #endif
 				pf_unlink_state(state);
 				killed++;
+			} else if (state->af == psk->psk_af && !PF_AZERO(&psk->psk_src.addr.v.a.addr, psk->psk_af) &&
+			    !PF_AZERO(&state->rt_addr, state->af) && PF_AEQ(&psk->psk_src.addr.v.a.addr, &state->rt_addr, state->af)) {
+				if (state->proto == IPPROTO_TCP)
+					state->src.state = PF_TCPS_PROXY_DST; /* XXX: Hack to send a RST back to the host */
+#if NPFSYNC
+				/* don't send out individual delete messages */
+				state->sync_flags = PFSTATE_NOSYNC;
+#endif
+				pf_unlink_state(state);
+				killed++;
 			}
 		}
 		psk->psk_af = killed;
