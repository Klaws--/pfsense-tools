diff --git a/sys/contrib/pf/net/if_pfsync.c b/sys/contrib/pf/net/if_pfsync.c
index a729afd..dfdc532 100644
--- a/sys/contrib/pf/net/if_pfsync.c
+++ b/sys/contrib/pf/net/if_pfsync.c
@@ -602,9 +602,9 @@ pfsync_input(struct mbuf *m, ...)
 				return;
 			}
 			for (st = RB_MIN(pf_state_tree_lan_ext,
-			    &kif->pfik_lan_ext); st; st = nexts) {
+			    &pfi_all->pfik_lan_ext); st; st = nexts) {
 				nexts = RB_NEXT(pf_state_tree_lan_ext,
-				    &kif->pfik_lan_ext, st);
+				    &pfi_all->pfik_lan_ext, st);
 				if (st->creatorid == creatorid) {
 					st->sync_flags |= PFSTATE_FROMSYNC;
 					pf_unlink_state(st);
diff --git a/sys/contrib/pf/net/pf.c b/sys/contrib/pf/net/pf.c
index 7383677..38c7e6b 100644
--- a/sys/contrib/pf/net/pf.c
+++ b/sys/contrib/pf/net/pf.c
@@ -360,8 +360,8 @@ struct pf_pool_limit pf_pool_limits[PF_LIMIT_MAX] = {
 	(s)->lan.addr.addr32[3] != (s)->gwy.addr.addr32[3])) || \
 	(s)->lan.port != (s)->gwy.port
 
-#define BOUND_IFACE(r, k) \
-	((r)->rule_flag & PFRULE_IFBOUND) ? (k) : pfi_all
+#define BOUND_IFACE(r, k)	k
+	/* ((r)->rule_flag & PFRULE_IFBOUND) ? (k) : pfi_all */
 
 #define STATE_INC_COUNTERS(s)				\
 	do {						\
@@ -664,17 +664,21 @@ pf_find_state_recurse(struct pfi_kif *kif, struct pf_state_cmp *key, u_int8_t tr
 
 	switch (tree) {
 	case PF_LAN_EXT:
+#if 0
 		if ((s = RB_FIND(pf_state_tree_lan_ext, &kif->pfik_lan_ext,
 		    (struct pf_state *)key)) != NULL)
 			return (s);
+#endif
 		if ((s = RB_FIND(pf_state_tree_lan_ext, &pfi_all->pfik_lan_ext,
 		    (struct pf_state *)key)) != NULL)
 			return (s);
 		return (NULL);
 	case PF_EXT_GWY:
+#if 0
 		if ((s = RB_FIND(pf_state_tree_ext_gwy, &kif->pfik_ext_gwy,
 		    (struct pf_state *)key)) != NULL)
 			return (s);
+#endif
 		if ((s = RB_FIND(pf_state_tree_ext_gwy, &pfi_all->pfik_ext_gwy,
 		    (struct pf_state *)key)) != NULL)
 			return (s);
@@ -688,34 +692,34 @@ struct pf_state *
 pf_find_state_all(struct pf_state_cmp *key, u_int8_t tree, int *more)
 {
 	struct pf_state *s, *ss = NULL;
-	struct pfi_kif	*kif;
+	/* struct pfi_kif	*kif;*/
 
 	pf_status.fcounters[FCNT_STATE_SEARCH]++;
 
 	switch (tree) {
 	case PF_LAN_EXT:
-		TAILQ_FOREACH(kif, &pfi_statehead, pfik_w_states) {
+		/* TAILQ_FOREACH(kif, &pfi_statehead, pfik_w_states) { */
 			s = RB_FIND(pf_state_tree_lan_ext,
-			    &kif->pfik_lan_ext, (struct pf_state *)key);
+			    &pfi_all->pfik_lan_ext, (struct pf_state *)key);
 			if (s == NULL)
-				continue;
+				return NULL;
 			if (more == NULL)
 				return (s);
 			ss = s;
 			(*more)++;
-		}
+		/* } */
 		return (ss);
 	case PF_EXT_GWY:
-		TAILQ_FOREACH(kif, &pfi_statehead, pfik_w_states) {
+		/* TAILQ_FOREACH(kif, &pfi_statehead, pfik_w_states) { */
 			s = RB_FIND(pf_state_tree_ext_gwy,
-			    &kif->pfik_ext_gwy, (struct pf_state *)key);
+			    &pfi_all->pfik_ext_gwy, (struct pf_state *)key);
 			if (s == NULL)
-				continue;
+				return NULL;
 			if (more == NULL)
 				return (s);
 			ss = s;
 			(*more)++;
-		}
+		/* } */
 		return (ss);
 	default:
 		panic("pf_find_state_all");
@@ -917,7 +921,7 @@ pf_insert_state(struct pfi_kif *kif, struct pf_state *state)
 {
 	/* Thou MUST NOT insert multiple duplicate keys */
 	state->u.s.kif = kif;
-	if (RB_INSERT(pf_state_tree_lan_ext, &kif->pfik_lan_ext, state)) {
+	if (RB_INSERT(pf_state_tree_lan_ext, &pfi_all->pfik_lan_ext, state)) {
 		if (pf_status.debug >= PF_DEBUG_MISC) {
 			printf("pf: state insert failed: tree_lan_ext");
 			printf(" lan: ");
@@ -936,7 +940,7 @@ pf_insert_state(struct pfi_kif *kif, struct pf_state *state)
 		return (-1);
 	}
 
-	if (RB_INSERT(pf_state_tree_ext_gwy, &kif->pfik_ext_gwy, state)) {
+	if (RB_INSERT(pf_state_tree_ext_gwy, &pfi_all->pfik_ext_gwy, state)) {
 		if (pf_status.debug >= PF_DEBUG_MISC) {
 			printf("pf: state insert failed: tree_ext_gwy");
 			printf(" lan: ");
@@ -952,7 +956,7 @@ pf_insert_state(struct pfi_kif *kif, struct pf_state *state)
 				printf(" (from sync)");
 			printf("\n");
 		}
-		RB_REMOVE(pf_state_tree_lan_ext, &kif->pfik_lan_ext, state);
+		RB_REMOVE(pf_state_tree_lan_ext, &pfi_all->pfik_lan_ext, state);
 		return (-1);
 	}
 
@@ -976,8 +980,8 @@ pf_insert_state(struct pfi_kif *kif, struct pf_state *state)
 				printf(" (from sync)");
 			printf("\n");
 		}
-		RB_REMOVE(pf_state_tree_lan_ext, &kif->pfik_lan_ext, state);
-		RB_REMOVE(pf_state_tree_ext_gwy, &kif->pfik_ext_gwy, state);
+		RB_REMOVE(pf_state_tree_lan_ext, &pfi_all->pfik_lan_ext, state);
+		RB_REMOVE(pf_state_tree_ext_gwy, &pfi_all->pfik_ext_gwy, state);
 		return (-1);
 	}
 	TAILQ_INSERT_TAIL(&state_list, state, u.s.entry_list);
@@ -1213,9 +1217,9 @@ pf_unlink_state(struct pf_state *cur)
 		    TH_RST|TH_ACK, 0, 0, 0, 1, cur->tag, NULL, NULL);
 	}
 	RB_REMOVE(pf_state_tree_ext_gwy,
-	    &cur->u.s.kif->pfik_ext_gwy, cur);
+	    &pfi_all->pfik_ext_gwy, cur);
 	RB_REMOVE(pf_state_tree_lan_ext,
-	    &cur->u.s.kif->pfik_lan_ext, cur);
+	    &pfi_all->pfik_lan_ext, cur);
 	RB_REMOVE(pf_state_tree_id, &tree_id, cur);
 #if NPFSYNC
 	if (cur->creatorid == pf_status.hostid)
