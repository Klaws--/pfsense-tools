diff --git a/sbin/ipfw/ipfw2.c b/sbin/ipfw/ipfw2.c
index 577d644..619b036 100644
--- a/sbin/ipfw/ipfw2.c
+++ b/sbin/ipfw/ipfw2.c
@@ -4115,6 +4115,7 @@ ipfw_flush(int force)
 }
 
 
+static void table_list_entry(ipfw_table_xentry *);
 static void table_list(uint16_t num, int need_header);
 static void table_fill_xentry(char *arg, ipfw_table_xentry *xent);
 
@@ -4176,6 +4177,15 @@ ipfw_table_handler(int ac, char *av[])
 		table_fill_xentry(*av, &xent);
 
 		ac--; av++;
+		if (ac > 1 && av) {
+			if (_substrcmp(*av, "mac") == 0)  {
+				uint8_t mask[8];
+				xent.type = IPFW_TABLE_MIX;
+				get_mac_addr_mask(av[1], (uint8_t *)xent.k.mix.mac, mask);
+				xent.len += ETHER_ADDR_LEN;
+				ac-=2; av+=2;
+			}
+		}
 		if (do_add && ac) {
 			unsigned int tval;
 			/* isdigit is a bit of a hack here.. */
@@ -4218,6 +4228,41 @@ ipfw_table_handler(int ac, char *av[])
 		do {
 			table_list(xent.tbl, is_all);
 		} while (++xent.tbl < a);
+	} else if (_substrcmp(*av, "entrystats") == 0) {
+		table_fill_xentry(*av, &xent);
+		ac--; av++;
+		if (ac > 1 && av) {
+			if (_substrcmp(*av, "mac") == 0)  {
+				uint8_t mask[8];
+				xent.type = IPFW_TABLE_MIX;
+				get_mac_addr_mask(av[1], (uint8_t *)xent.k.mix.mac, mask);
+				xent.len += ETHER_ADDR_LEN;
+				ac-=2; av+=2;
+			}
+		}
+		if (do_setcmd3(IP_FW_TABLE_XLISTENTRY, &xent, xent.len) < 0) {
+			/* If running silent, don't bomb out on these errors. */
+			if (!(co.do_quiet))
+				err(EX_OSERR, "setsockopt(IP_FW_TABLE_XLISTENTRY)");
+		} else
+			table_list_entry(&xent);
+	} else if (_substrcmp(*av, "entryzerostats") == 0) {
+		table_fill_xentry(*av, &xent);
+		ac--; av++;
+		if (ac > 1 && av) {
+			if (_substrcmp(*av, "mac") == 0)  {
+				uint8_t mask[8];
+				xent.type = IPFW_TABLE_MIX;
+				get_mac_addr_mask(av[1], (uint8_t *)xent.k.mix.mac, mask);
+				xent.len += ETHER_ADDR_LEN;
+				ac-=2; av+=2;
+			}
+		}
+		if (do_setcmd3(IP_FW_TABLE_XZEROENTRY, &xent, xent.len) < 0) {
+			/* If running silent, don't bomb out on these errors. */
+			if (!(co.do_quiet))
+				err(EX_OSERR, "setsockopt(IP_FW_TABLE_XZEROENTRY)");
+		}
 	} else
 		errx(EX_USAGE, "invalid table command %s", *av);
 }
@@ -4310,6 +4355,68 @@ table_fill_xentry(char *arg, ipfw_table_xentry *xent)
 }
 
 static void
+table_list_entry(ipfw_table_xentry *xent)
+{
+	struct in6_addr *addr6;
+	uint32_t tval;
+	char tbuf[128];
+
+	switch (xent->type) {
+	case IPFW_TABLE_CIDR:
+		/* IPv4 or IPv6 prefixes */
+		tval = xent->value;
+		addr6 = &xent->k.addr6;
+
+
+		if (IN6_IS_ADDR_V4COMPAT(addr6)) {
+			/* IPv4 address */
+			inet_ntop(AF_INET, &addr6->s6_addr32[3], tbuf, sizeof(tbuf));
+		} else {
+			/* IPv6 address */
+			inet_ntop(AF_INET6, addr6, tbuf, sizeof(tbuf));
+		}
+
+		if (co.do_value_as_ip) {
+			tval = htonl(tval);
+			printf("%s/%u %s %d %d %u\n", tbuf, xent->masklen,
+			    inet_ntoa(*(struct in_addr *)&tval), pr_u64(&xent->packets, 0), pr_u64(&xent->bytes, 0), xent->timestamp);
+		} else
+			printf("%s/%u %u %d %d %u\n", tbuf, xent->masklen, tval,
+			    pr_u64(&xent->packets, 0), pr_u64(&xent->bytes, 0), xent->timestamp);
+		break;
+	case IPFW_TABLE_INTERFACE:
+		/* Interface names */
+		tval = xent->value;
+		if (co.do_value_as_ip) {
+			tval = htonl(tval);
+			printf("%s %u %s %d %d %u\n", xent->k.iface, xent->masklen,
+			    inet_ntoa(*(struct in_addr *)&tval), pr_u64(&xent->packets, 0), pr_u64(&xent->bytes, 0), xent->timestamp);
+		} else
+			printf("%s %u %u %d %d %u\n", xent->k.iface, xent->masklen, tval,
+			    pr_u64(&xent->packets, 0), pr_u64(&xent->bytes, 0), xent->timestamp);
+
+		break;
+
+	case IPFW_TABLE_MIX:
+		/* mix of ip+mac */
+		tval = xent->value;
+
+		/* IPv4 address */
+		inet_ntop(AF_INET, &xent->k.mix.addr, tbuf, sizeof(tbuf));
+
+		if (co.do_value_as_ip) {
+			tval = htonl(tval);
+			printf("%s/%u %s %s %d %d %u\n", tbuf, xent->masklen, ether_ntoa((struct ether_addr *)xent->k.mix.mac),
+			    inet_ntoa(*(struct in_addr *)&tval),
+			    pr_u64(&xent->packets, 0), pr_u64(&xent->bytes, 0), xent->timestamp);
+		} else
+			printf("%s/%u %s %u %d %d %u\n", tbuf, xent->masklen, ether_ntoa((struct ether_addr *)xent->k.mix.mac), tval,
+			    pr_u64(&xent->packets, 0), pr_u64(&xent->bytes, 0), xent->timestamp);
+		break;
+	}
+}
+
+static void
 table_list(uint16_t num, int need_header)
 {
 	ipfw_xtable *tbl;
@@ -4377,6 +4483,23 @@ table_list(uint16_t num, int need_header)
 				    inet_ntoa(*(struct in_addr *)&tval));
 			} else
 				printf("%s %u\n", xent->k.iface, tval);
+
+			break;
+
+		case IPFW_TABLE_MIX:
+			/* mix of ip+mac */
+			tval = xent->value;
+
+			/* IPv4 address */
+			inet_ntop(AF_INET, &xent->k.mix.addr, tbuf, sizeof(tbuf));
+
+			if (co.do_value_as_ip) {
+				tval = htonl(tval);
+				printf("%s/%u %s %s\n", tbuf, xent->masklen, ether_ntoa((struct ether_addr *)xent->k.mix.mac),
+				    inet_ntoa(*(struct in_addr *)&tval));
+			} else
+				printf("%s/%u %s %u\n", tbuf, xent->masklen, ether_ntoa((struct ether_addr *)xent->k.mix.mac), tval);
+			break;
 		}
 
 		if (sz < xent->len)
diff --git a/sys/netinet/ip_fw.h b/sys/netinet/ip_fw.h
index 14b08f5..70ab5b2 100644
--- a/sys/netinet/ip_fw.h
+++ b/sys/netinet/ip_fw.h
@@ -74,6 +74,8 @@ typedef struct _ip_fw3_opheader {
 #define	IP_FW_TABLE_XDEL	87	/* delete entry */
 #define	IP_FW_TABLE_XGETSIZE	88	/* get table size */
 #define	IP_FW_TABLE_XLIST	89	/* list table contents */
+#define	IP_FW_TABLE_XLISTENTRY	90	/* list one table entry contents */
+#define	IP_FW_TABLE_XZEROENTRY	91	/* zero one table entry stats */
 
 /*
  * The kernel representation of ipfw rules is made of a list of
@@ -600,7 +602,8 @@ struct _ipfw_dyn_rule {
 
 #define	IPFW_TABLE_CIDR		1	/* Table for holding IPv4/IPv6 prefixes */
 #define	IPFW_TABLE_INTERFACE	2	/* Table for holding interface names */
-#define	IPFW_TABLE_MAXTYPE	2	/* Maximum valid number */
+#define	IPFW_TABLE_MIX		3	/* Table for holding IPv4/mac entries */
+#define	IPFW_TABLE_MAXTYPE	4	/* Maximum valid number */
 
 typedef struct	_ipfw_table_entry {
 	in_addr_t	addr;		/* network address		*/
@@ -617,9 +620,19 @@ typedef struct	_ipfw_table_xentry {
 	uint32_t	value;		/* value			*/
 	union {
 		/* Longest field needs to be aligned by 4-byte boundary	*/
+#ifndef ETHER_ADDR_LEN
+#define ETHER_ADDR_LEN 6
+#endif
+		struct {
+			struct in_addr addr;
+			char mac[ETHER_ADDR_LEN];
+		} mix;
 		struct in6_addr	addr6;	/* IPv6 address 		*/
 		char	iface[IF_NAMESIZE];	/* interface name	*/
 	} k;
+	uint64_t               bytes;
+	uint64_t               packets;
+	uint32_t               timestamp;
 } ipfw_table_xentry;
 
 typedef struct	_ipfw_table {
diff --git a/sys/netpfil/ipfw/ip_fw2.c b/sys/netpfil/ipfw/ip_fw2.c
index 6317013..e0a879d 100644
--- a/sys/netpfil/ipfw/ip_fw2.c
+++ b/sys/netpfil/ipfw/ip_fw2.c
@@ -355,8 +355,8 @@ iface_match(struct ifnet *ifp, ipfw_insn_if *cmd, struct ip_fw_chain *chain, uin
 	/* Check by name or by IP address */
 	if (cmd->name[0] != '\0') { /* match by name */
 		if (cmd->name[0] == '\1') /* use tablearg to match */
-			return ipfw_lookup_table_extended(chain, cmd->p.glob,
-				ifp->if_xname, tablearg, IPFW_TABLE_INTERFACE);
+			return (ipfw_lookup_table_extended(chain, cmd->p.glob,
+				ifp->if_xname, tablearg, IPFW_TABLE_INTERFACE) != NULL);
 		/* Check name */
 		if (cmd->p.glob) {
 			if (fnmatch(cmd->name, ifp->if_xname, 0) == 0)
@@ -952,6 +952,7 @@ ipfw_chk(struct ip_fw_args *args)
 	int dyn_dir = MATCH_UNKNOWN;
 	ipfw_dyn_rule *q = NULL;
 	struct ip_fw_chain *chain = &V_layer3_chain;
+	void *tblent = NULL;
 
 	/*
 	 * We store in ulp a pointer to the upper layer protocol header.
@@ -1285,6 +1286,7 @@ do {								\
 			continue;
 
 		skip_or = 0;
+		tblent = NULL;
 		for (l = f->cmd_len, cmd = f->cmd ; l > 0 ;
 		    l -= cmdlen, cmd += cmdlen) {
 			int match;
@@ -1399,7 +1401,7 @@ do {								\
 				break;
 
 			case O_IN:	/* "out" is "not in" */
-				match = (oif == NULL);
+				match = (args->dir == DIR_IN);
 				break;
 
 			case O_LAYER2:
@@ -1434,7 +1436,35 @@ do {								\
 
 			case O_IP_SRC_LOOKUP:
 			case O_IP_DST_LOOKUP:
-				if (is_ipv4) {
+				if (args->eh) {
+					struct {
+						struct in_addr addr;
+						char *mac;
+					} mix;
+					void *pkey = &mix;
+			    		uint32_t v = 0;
+
+					if (is_ipv4) {
+						mix.addr.s_addr = (cmd->opcode == O_IP_DST_LOOKUP) ?
+							dst_ip.s_addr : src_ip.s_addr;
+						mix.mac = (cmd->opcode == O_IP_DST_LOOKUP) ?
+							args->eh->ether_dhost :
+							args->eh->ether_shost);
+						tblent = ipfw_lookup_table_extended(chain,
+								cmd->arg1, pkey, &v,
+								IPFW_TABLE_MIX);
+						if (tblent == NULL) {
+							match = 0;
+							break;
+						} else
+							match = 1;
+						if (cmdlen == F_INSN_SIZE(ipfw_insn_u32))
+							match = ((ipfw_insn_u32 *)cmd)->d[0] == v;
+						if (match)
+							tablearg = v;
+
+					}
+				} else if (is_ipv4) {
 				    uint32_t key =
 					(cmd->opcode == O_IP_DST_LOOKUP) ?
 					    dst_ip.s_addr : src_ip.s_addr;
@@ -1494,9 +1524,9 @@ do {								\
 					uint32_t v = 0;
 					void *pkey = (cmd->opcode == O_IP_DST_LOOKUP) ?
 						&args->f_id.dst_ip6: &args->f_id.src_ip6;
-					match = ipfw_lookup_table_extended(chain,
+					match = (ipfw_lookup_table_extended(chain,
 							cmd->arg1, pkey, &v,
-							IPFW_TABLE_CIDR);
+							IPFW_TABLE_CIDR) != NULL);
 					if (cmdlen == F_INSN_SIZE(ipfw_insn_u32))
 						match = ((ipfw_insn_u32 *)cmd)->d[0] == v;
 					if (match)
@@ -2311,8 +2341,7 @@ do {								\
 				break;
 
 			case O_FORWARD_IP:
-				if (args->eh)	/* not valid on layer2 pkts */
-					break;
+				if (!args->eh)	{/* not valid on layer2 pkts */
 				if (q == NULL || q->rule != f ||
 				    dyn_dir == MATCH_FORWARD) {
 				    struct sockaddr_in *sa;
@@ -2327,6 +2356,48 @@ do {								\
 					args->next_hop = sa;
 				    }
 				}
+				} else if (args->eh) {
+					struct m_tag *fwd_tag;
+					struct sockaddr_in *sa;
+					u_short sum;
+
+					/*
+					* Checksum correct? (from ip_fastfwd.c)
+					*/
+					if (m->m_pkthdr.csum_flags & CSUM_IP_CHECKED)
+						sum = !(m->m_pkthdr.csum_flags & CSUM_IP_VALID);
+					else {
+						if (hlen == sizeof(struct ip))
+							sum = in_cksum_hdr(ip);
+						else
+							sum = in_cksum(m, hlen);
+					}
+					if (sum) {
+						IPSTAT_INC(ips_badsum);
+						retval = IP_FW_DENY;
+						break;
+					}
+
+					/*
+					* Remember that we have checked the IP header and found it valid.
+					*/
+					m->m_pkthdr.csum_flags |= (CSUM_IP_CHECKED | CSUM_IP_VALID);
+
+					sa = &(((ipfw_insn_sa *)cmd)->sa);
+					fwd_tag = m_tag_get(PACKET_TAG_IPFORWARD,
+						sizeof(struct sockaddr_in), M_NOWAIT);
+					if (fwd_tag == NULL)
+						retval = IP_FW_DENY;
+					else {
+						bcopy(sa, (fwd_tag+1), sizeof(struct sockaddr_in));
+						m_tag_prepend(m, fwd_tag);
+
+						if (in_localip(sa->sin_addr))
+							m->m_flags |= M_FASTFWD_OURS;
+						m->m_flags |= M_IP_NEXTHOP;
+					}
+				}
+
 				retval = IP_FW_PASS;
 				l = 0;          /* exit inner loop */
 				done = 1;       /* exit outer loop */
@@ -2334,8 +2405,7 @@ do {								\
 
 #ifdef INET6
 			case O_FORWARD_IP6:
-				if (args->eh)	/* not valid on layer2 pkts */
-					break;
+				if (args->eh) {	/* not valid on layer2 pkts */
 				if (q == NULL || q->rule != f ||
 				    dyn_dir == MATCH_FORWARD) {
 					struct sockaddr_in6 *sin6;
@@ -2343,6 +2413,25 @@ do {								\
 					sin6 = &(((ipfw_insn_sa6 *)cmd)->sa);
 					args->next_hop6 = sin6;
 				}
+				} else if (args->eh) {
+					struct m_tag *fwd_tag;
+					struct sockaddr_in6 *sin6;
+					u_short sum;
+
+					sin6 = &(((ipfw_insn_sa6 *)cmd)->sa);
+					fwd_tag = m_tag_get(PACKET_TAG_IPFORWARD,
+						sizeof(struct sockaddr_in6), M_NOWAIT);
+					if (fwd_tag == NULL)
+						retval = IP_FW_DENY;
+					else {
+						bcopy(sin6, (fwd_tag+1), sizeof(struct sockaddr_in6));
+						m_tag_prepend(m, fwd_tag);
+
+						if (in6_localip(sin6->sin6_addr))
+							m->m_flags |= M_FASTFWD_OURS;
+						m->m_flags |= M_IP6_NEXTHOP;
+					}
+				}
 				retval = IP_FW_PASS;
 				l = 0;		/* exit inner loop */
 				done = 1;	/* exit outer loop */
@@ -2502,6 +2591,8 @@ do {								\
 		struct ip_fw *rule = chain->map[f_pos];
 		/* Update statistics */
 		IPFW_INC_RULE_COUNTER(rule, pktlen);
+		if (tblent != NULL)
+			ipfw_count_table_xentry_stats(tblent, pktlen);
 	} else {
 		retval = IP_FW_DENY;
 		printf("ipfw: ouch!, skip past end of rules, denying packet\n");
diff --git a/sys/netpfil/ipfw/ip_fw_pfil.c b/sys/netpfil/ipfw/ip_fw_pfil.c
index e672b62..a293e8a 100644
--- a/sys/netpfil/ipfw/ip_fw_pfil.c
+++ b/sys/netpfil/ipfw/ip_fw_pfil.c
@@ -143,8 +143,9 @@ again:
 	}
 
 	args.m = *m0;
-	args.oif = dir == DIR_OUT ? ifp : NULL;
+	args.oif = ifp;
 	args.inp = inp;
+	args.dir = dir;
 
 	ipfw = ipfw_chk(&args);
 	*m0 = args.m;
@@ -314,9 +315,8 @@ ipfw_check_frame(void *arg, struct mbuf **m0, struct ifnet *dst, int dir,
 		/* XXX can we free it after use ? */
 		mtag->m_tag_id = PACKET_TAG_NONE;
 		r = (struct ipfw_rule_ref *)(mtag + 1);
-		if (r->info & IPFW_ONEPASS)
-			return (0);
-		args.rule = *r;
+		m_tag_delete(*m0, mtag);
+		return (0);
 	}
 
 	/* I need some amt of data to be contiguous */
@@ -333,12 +333,15 @@ ipfw_check_frame(void *arg, struct mbuf **m0, struct ifnet *dst, int dir,
 	save_eh = *eh;			/* save copy for restore below */
 	m_adj(m, ETHER_HDR_LEN);	/* strip ethernet header */
 
+	dir = dir == PFIL_IN ? DIR_IN : DIR_OUT;
+
 	args.m = m;		/* the packet we are looking at		*/
 	args.oif = dst;		/* destination, if any			*/
 	args.next_hop = NULL;	/* we do not support forward yet	*/
 	args.next_hop6 = NULL;	/* we do not support forward yet	*/
 	args.eh = &save_eh;	/* MAC header for bridged/MAC packets	*/
 	args.inp = NULL;	/* used by ipfw uid/gid/jail rules	*/
+	args.dir = dir;		/* pfSense addition			*/
 	i = ipfw_chk(&args);
 	m = args.m;
 	if (m != NULL) {
@@ -375,7 +378,7 @@ ipfw_check_frame(void *arg, struct mbuf **m0, struct ifnet *dst, int dir,
 			break; /* i.e. drop */
 
 		*m0 = NULL;
-		dir = PROTO_LAYER2 | (dst ? DIR_OUT : DIR_IN);
+		dir = PROTO_LAYER2 | dir;
 		ip_dn_io_ptr(&m, dir, &args);
 		return 0;
 
diff --git a/sys/netpfil/ipfw/ip_fw_private.h b/sys/netpfil/ipfw/ip_fw_private.h
index a41cdf5..c08161b 100644
--- a/sys/netpfil/ipfw/ip_fw_private.h
+++ b/sys/netpfil/ipfw/ip_fw_private.h
@@ -101,6 +101,7 @@ struct ip_fw_args {
 
 	struct ipfw_flow_id f_id;	/* grabbed from IP header	*/
 	//uint32_t	cookie;		/* a cookie depending on rule action */
+	uint32_t        dir;            /* direction */
 	struct inpcb	*inp;
 
 	struct _ip6dn_args	dummypar; /* dummynet->ip6_output */
diff --git a/sys/netpfil/ipfw/ip_fw_sockopt.c b/sys/netpfil/ipfw/ip_fw_sockopt.c
index 64f09a5..15d22b2 100644
--- a/sys/netpfil/ipfw/ip_fw_sockopt.c
+++ b/sys/netpfil/ipfw/ip_fw_sockopt.c
@@ -1241,6 +1241,47 @@ ipfw_ctl(struct sockopt *sopt)
 		}
 		break;
 
+	case IP_FW_TABLE_XZEROENTRY: /* IP_FW3 */
+		{
+			ipfw_table_xentry *xent = (ipfw_table_xentry *)(op3 + 1);
+
+			/* Check minimum header size */
+			if (IP_FW3_OPLENGTH(sopt) < offsetof(ipfw_table_xentry, k)) {
+				error = EINVAL;
+				break;
+			}
+
+			/* Check if len field is valid */
+			if (xent->len > sizeof(ipfw_table_xentry)) {
+				error = EINVAL;
+				break;
+			}
+			
+			error = ipfw_zero_table_xentry_stats(chain, xent);
+		}
+		break;
+
+	case IP_FW_TABLE_XLISTENTRY: /* IP_FW3 */
+		{
+			ipfw_table_xentry *xent = (ipfw_table_xentry *)(op3 + 1);
+
+			/* Check minimum header size */
+			if (IP_FW3_OPLENGTH(sopt) < offsetof(ipfw_table_xentry, k)) {
+				error = EINVAL;
+				break;
+			}
+
+			/* Check if len field is valid */
+			if (xent->len > sizeof(ipfw_table_xentry)) {
+				error = EINVAL;
+				break;
+			}
+			
+			error = ipfw_lookup_table_xentry(chain, xent);
+			xent->timestamp += boot_seconds;
+		}
+		break;
+
 	case IP_FW_TABLE_XLIST: /* IP_FW3 */
 		{
 			ipfw_xtable *tbl;
diff --git a/sys/netpfil/ipfw/ip_fw_table.c b/sys/netpfil/ipfw/ip_fw_table.c
index a22fff9..d26de75 100644
--- a/sys/netpfil/ipfw/ip_fw_table.c
+++ b/sys/netpfil/ipfw/ip_fw_table.c
@@ -75,6 +75,9 @@ struct table_entry {
 	struct radix_node	rn[2];
 	struct sockaddr_in	addr, mask;
 	u_int32_t		value;
+	u_int32_t               timestamp;
+	u_int64_t               bytes;
+	u_int64_t               packets;
 };
 
 struct xaddr_iface {
@@ -83,6 +86,14 @@ struct xaddr_iface {
 	char 		ifname[IF_NAMESIZE];	/* Interface name */
 };
 
+struct xaddr_mix {
+	uint8_t		mix_len		/* length of this struct */
+	sa_family_t     sin_family;
+        uint8_t		pad[4];
+        struct  in_addr sin_addr;
+	u_char	mac[ETHER_ADDR_LEN];
+};
+
 struct table_xentry {
 	struct radix_node	rn[2];
 	union {
@@ -90,14 +101,19 @@ struct table_xentry {
 		struct sockaddr_in6	addr6;
 #endif
 		struct xaddr_iface	iface;
+		struct xaddr_mix	mix;
 	} a;
 	union {
 #ifdef INET6
 		struct sockaddr_in6	mask6;
 #endif
 		struct xaddr_iface	ifmask;
+		struct xaddr_mix	mixmask;
 	} m;
 	u_int32_t		value;
+	u_int32_t               timestamp;
+	u_int64_t               bytes;
+	u_int64_t               packets;
 };
 
 /*
@@ -117,6 +133,7 @@ struct table_xentry {
 #define KEY_LEN_INET	(offsetof(struct sockaddr_in, sin_addr) + sizeof(in_addr_t))
 #define KEY_LEN_INET6	(offsetof(struct sockaddr_in6, sin6_addr) + sizeof(struct in6_addr))
 #define KEY_LEN_IFACE	(offsetof(struct xaddr_iface, ifname))
+#define KEY_LEN_MIX	(offsetof(struct xaddr_mix, sin_addr) + sizeof(in_addr_t) + ETHER_ADDR_LEN)
 
 #define OFF_LEN_INET	(8 * offsetof(struct sockaddr_in, sin_addr))
 #define OFF_LEN_INET6	(8 * offsetof(struct sockaddr_in6, sin6_addr))
@@ -231,6 +248,23 @@ ipfw_add_table_entry(struct ip_fw_chain *ch, uint16_t tbl, void *paddr,
 		mask_ptr = NULL;
 		break;
 
+	cae IPFW_TABLE_MIX:
+		xent = malloc(sizeof(*xent), M_IPFW_TBL, M_WAITOK | M_ZERO);
+		xent->value = value;
+		/* Set 'total' structure length */
+		KEY_LEN(xent->a.mix) = KEY_LEN_MIX;
+		KEY_LEN(xent->mask) = KEY_LEN_INET;
+		/* Set offset of IPv4 address in bits */
+		offset = OFF_LEN_INET;
+		memcpy(&xent->a.mix, paddr, mlen);
+		/* Set pointers */
+		rnh_ptr = &ch->xtables[tbl];
+		ent_ptr = xent;
+		addr_ptr = (struct sockaddr *)&xent->a.mix;
+		mask_ptr = NULL;
+	}
+		break;
+
 	default:
 		return (EINVAL);
 	}
@@ -365,6 +399,22 @@ ipfw_del_table_entry(struct ip_fw_chain *ch, uint16_t tbl, void *paddr,
 
 		break;
 
+	case IPFW_TABLE_MIX:
+		if (mlen > (32 + ETHER_ADDR_LEN)
+			return (EINVAL);
+		struct xaddr_mix mix;
+		memset(&mix, 0, sizeof(mix));
+
+		/* Set 'total' structure length */
+		KEY_LEN(mix) = KEY_LEN_MIX;
+		KEY_LEN(mixmask) = KEY_LEN_MIX;
+		memcpy(&mix.in_addr, paddr, sizeof(struct in_addr) + ETHER_ADDR_LEN);
+		rnh_ptr = &ch->xtables[tbl];
+		sa_ptr = (struct sockaddr *)&mix;
+		mask_ptr = NULL;
+
+		break;
+
 	default:
 		return (EINVAL);
 	}
@@ -550,14 +600,24 @@ ipfw_lookup_table(struct ip_fw_chain *ch, uint16_t tbl, in_addr_t addr,
 	return (0);
 }
 
+void
+ipfw_count_table_xentry_stats(void *arg, int pktlen)
+{
+	ipfw_table_xentry *xent= arg;
+{
+	xent->packets++;
+	xent->bytes += pktlen;
+	xent->timestamp = time_uptime;
+}
+
 int
-ipfw_lookup_table_extended(struct ip_fw_chain *ch, uint16_t tbl, void *paddr,
-    uint32_t *val, int type)
+ipfw_zero_table_xentry_stats(struct ip_fw_chain *ch, ipfw_table_xentry *arg)
 {
 	struct radix_node_head *rnh;
 	struct table_xentry *xent;
 	struct sockaddr_in6 sa6;
 	struct xaddr_iface iface;
+	struct xaddr_mix xm;
 
 	if (tbl >= V_fw_tables_max)
 		return (0);
@@ -567,29 +627,130 @@ ipfw_lookup_table_extended(struct ip_fw_chain *ch, uint16_t tbl, void *paddr,
 	switch (type) {
 	case IPFW_TABLE_CIDR:
 		KEY_LEN(sa6) = KEY_LEN_INET6;
-		memcpy(&sa6.sin6_addr, paddr, sizeof(struct in6_addr));
+		memcpy(&sa6.sin6_addr, &arg->k.addr6, sizeof(struct in6_addr));
 		xent = (struct table_xentry *)(rnh->rnh_lookup(&sa6, NULL, rnh));
 		break;
 
 	case IPFW_TABLE_INTERFACE:
 		KEY_LEN(iface) = KEY_LEN_IFACE +
-		    strlcpy(iface.ifname, (char *)paddr, IF_NAMESIZE) + 1;
+		    strlcpy(iface.ifname, arg->k.iface, IF_NAMESIZE) + 1;
 		/* Assume direct match */
 		/* FIXME: Add interface pattern matching */
 		xent = (struct table_xentry *)(rnh->rnh_lookup(&iface, NULL, rnh));
 		break;
 
+	case IPFW_TABLE_MIX:
+		KEY_LEN(xm) = KEY_LEN_MIX;
+		memcpy(&xm.sin_addr, &arg->k.mix.addr, sizeof(struct in_addr));
+		memcpy(&xm.mac, arg->k.mix.mac, ETHER_ADDR_LEN);
+		xent = (struct table_xentry *)(rnh->rnh_lookup(&xm, NULL, rnh));
+		break;
+
 	default:
 		return (0);
 	}
 
 	if (xent != NULL) {
-		*val = xent->value;
+		xent->bytes = 0;
+		xent->packets = 0;
+		xent->timestamp = time_uptime;
+		
+		return (1);
+	}
+	return (0);
+}
+
+int
+ipfw_lookup_table_xentry(struct ip_fw_chain *ch, ipfw_table_xentry *arg)
+{
+	struct radix_node_head *rnh;
+	struct table_xentry *xent;
+	struct sockaddr_in6 sa6;
+	struct xaddr_iface iface;
+	struct xaddr_mix xm;
+
+	if (tbl >= V_fw_tables_max)
+		return (0);
+	if ((rnh = ch->xtables[tbl]) == NULL)
+		return (0);
+
+	switch (type) {
+	case IPFW_TABLE_CIDR:
+		KEY_LEN(sa6) = KEY_LEN_INET6;
+		memcpy(&sa6.sin6_addr, &arg->k.addr6, sizeof(struct in6_addr));
+		xent = (struct table_xentry *)(rnh->rnh_lookup(&sa6, NULL, rnh));
+		break;
+
+	case IPFW_TABLE_INTERFACE:
+		KEY_LEN(iface) = KEY_LEN_IFACE +
+		    strlcpy(iface.ifname, arg->k.iface, IF_NAMESIZE) + 1;
+		/* Assume direct match */
+		/* FIXME: Add interface pattern matching */
+		xent = (struct table_xentry *)(rnh->rnh_lookup(&iface, NULL, rnh));
+		break;
+
+	case IPFW_TABLE_MIX:
+		KEY_LEN(xm) = KEY_LEN_MIX;
+		memcpy(&xm.sin_addr, &arg->k.mix.addr, sizeof(struct in_addr));
+		memcpy(&xm.mac, arg->k.mix.mac, ETHER_ADDR_LEN);
+		xent = (struct table_xentry *)(rnh->rnh_lookup(&xm, NULL, rnh));
+		break;
+
+	default:
+		return (0);
+	}
+
+	if (xent != NULL) {
+		arg->bytes = xent->bytes;
+		arg->packets = xent->packets;
+		arg->value = xent->value;
+		arg->timestamp = xent->timestamp;
+		
 		return (1);
 	}
 	return (0);
 }
 
+void *
+ipfw_lookup_table_extended(struct ip_fw_chain *ch, uint16_t tbl, void *paddr,
+    uint32_t *val, int type)
+{
+	struct radix_node_head *rnh;
+	struct table_xentry *xent;
+	struct sockaddr_in6 sa6;
+	struct xaddr_iface iface;
+
+	if (tbl >= V_fw_tables_max)
+		return (NULL);
+	if ((rnh = ch->xtables[tbl]) == NULL)
+		return (NULL);
+
+	switch (type) {
+	case IPFW_TABLE_CIDR:
+		KEY_LEN(sa6) = KEY_LEN_INET6;
+		memcpy(&sa6.sin6_addr, paddr, sizeof(struct in6_addr));
+		xent = (struct table_xentry *)(rnh->rnh_lookup(&sa6, NULL, rnh));
+		break;
+
+	case IPFW_TABLE_INTERFACE:
+		KEY_LEN(iface) = KEY_LEN_IFACE +
+		    strlcpy(iface.ifname, (char *)paddr, IF_NAMESIZE) + 1;
+		/* Assume direct match */
+		/* FIXME: Add interface pattern matching */
+		xent = (struct table_xentry *)(rnh->rnh_lookup(&iface, NULL, rnh));
+		break;
+
+	default:
+		return (NULL);
+	}
+
+	if (xent != NULL) {
+		*val = xent->value;
+		return (xent);
+	}
+	return (NULL);
+}
+
 static int
 count_table_entry(struct radix_node *rn, void *arg)
 {
@@ -696,6 +857,9 @@ dump_table_xentry_base(struct radix_node *rn, void *arg)
 	/* Save IPv4 address as deprecated IPv6 compatible */
 	xent->k.addr6.s6_addr32[3] = n->addr.sin_addr.s_addr;
 	xent->value = n->value;
+	xent->bytes = n->bytes;
+	xent->packets = n->packets;
+	xent->timestamp = n->timestamp;
 	tbl->cnt++;
 	return (0);
 }
@@ -733,12 +897,28 @@ dump_table_xentry_extended(struct radix_node *rn, void *arg)
 		memcpy(&xent->k, &n->a.iface.ifname, IF_NAMESIZE);
 		break;
 	
+	case IPFW_TABLE_MAC:
+		/* Assume exact mask */
+		xent->masklen = 8 * ETHER_ADDR_LEN;
+		memcpy(&xent->k, &n->a.iface.ifname, IF_NAMESIZE);
+		break;
+	
+	case IPFW_TABLE_MIX:
+		/* Assume exact mask */
+		xent->masklen = 8 * ETHER_ADDR_LEN + 32;
+		memcpy(&xent->k.mix.addr, &n->a.mix.addr, sizeof(struct in_addr));
+		memcpy(xent->k.mix.mac, &n->a.mix.mac, ETHER_ADDR_LEN);
+		break;
+
 	default:
 		/* unknown, skip entry */
 		return (0);
 	}
 
 	xent->value = n->value;
+	xent->bytes = n->bytes;
+	xent->packets = n->packets;
+	xent->timestamp = n->timestamp;
 	tbl->cnt++;
 	return (0);
 }
